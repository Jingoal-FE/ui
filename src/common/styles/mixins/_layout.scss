// mixins for grid system
// ------------------------
@mixin make-row($gutter: $grid-gutter-width) {
  position: relative;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  height: auto;
  @include clearfix();
}

@mixin make-grid-columns(
  $i: 1,
  $list: ".#{$ui-prefixCls}-col-#{$i}, .#{$ui-prefixCls}-col-xs-#{$i}, .#{$ui-prefixCls}-col-sm-#{$i}, .#{$ui-prefixCls}-col-md-#{$i}, .#{$ui-prefixCls}-col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .#{$ui-prefixCls}-col-#{$i}, .#{$ui-prefixCls}-col-xs-#{$i}, .#{$ui-prefixCls}-col-sm-#{$i}, .#{$ui-prefixCls}-col-md-#{$i}, .#{$ui-prefixCls}-col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".#{$ui-prefixCls}-col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .#{$ui-prefixCls}-col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
    flex: 0 0 auto;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$ui-prefixCls}-col-#{$class}-#{$index} {
      display: block;
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == width and $index == 0) {
    .#{$ui-prefixCls}-col-#{$class}-#{$index} {
      display: none;
    }
  }
  @if ($type == push) and ($index > 0) {
    .#{$ui-prefixCls}-col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .#{$ui-prefixCls}-col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .#{$ui-prefixCls}-col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .#{$ui-prefixCls}-col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .#{$ui-prefixCls}-col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == order) {
    .#{$ui-prefixCls}-col-#{$class}-order-#{$index} {
      order: $index;
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
  @include loop-grid-columns($grid-columns, $class, order);
}
